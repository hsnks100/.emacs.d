#+STARTIP: overview
* ui interface
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(set-face-attribute 'default nil
                    :family "Fira Code"
                    :height 110
                    :weight 'bold
                    :width 'normal)
#+END_SRC

* plugins

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<escape>") 'keyboard-escape-quit)
  (desktop-save-mode 1)

  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (modify-syntax-entry ?_ "w")
              )
            )
  (defun create-tags (dir-name)
    "Create tags file."
    (interactive "Directory: ")
    (eshell-command
     (format "find %s -type f -name \"*.*\" | etags -" dir-name)))


  (use-package try
    :ensure t
    )

  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5)
    )
  (use-package solarized-theme
    :ensure t
    )
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode t)
    (evil-set-initial-state 'calendar-mode 'emacs)
    (evil-set-initial-state 'calculator-mode 'emacs)
    (evil-set-initial-state 'git-rebase-mode 'emacs)
    (evil-set-initial-state 'magit-blame-mode 'emacs)
    (setq-default evil-symbol-word-search t)
    (defvar evil-want-C-g-bindings t)
    (defvar evil-want-C-i-jump (or (daemonp) (display-graphic-p)))
    (defvar evil-want-C-u-scroll t)  ; moved the universal arg to <leader> u
    (defvar evil-want-C-u-delete t)
    (defvar evil-want-C-w-scroll t)
    (defvar evil-want-C-w-delete t)
    (defvar evil-want-Y-yank-to-eol t)
    (defvar evil-want-abbrev-expand-on-insert-exit nil)

    (define-key evil-insert-state-map (kbd "C-SPC") 'toggle-input-method)
    (define-key evil-normal-state-map (kbd ", w") 'buffer-menu)
    (define-key evil-normal-state-map (kbd ", cc") 'compile)
    (define-key evil-normal-state-map (kbd "[") 'evil-scroll-up)
    (define-key evil-normal-state-map (kbd "]") 'evil-scroll-down)
    (define-key evil-visual-state-map (kbd "[") 'evil-scroll-up)
    (define-key evil-visual-state-map (kbd "]") 'evil-scroll-down)
    (global-set-key (kbd "C-h") 'evil-window-left)
    (global-set-key (kbd "C-l") 'evil-window-right)
    (global-set-key (kbd "C-j") 'evil-window-down)
    (global-set-key (kbd "C-k") 'evil-window-up)
    (define-key evil-normal-state-map "_" 'comment-line)
    (define-key evil-visual-state-map "_" 'comment-dwim)
    (define-key evil-normal-state-map (kbd ", w") 'buffer-menu)
    (define-key evil-normal-state-map (kbd "<up>") 'evil-window-increase-height)
    (define-key evil-normal-state-map (kbd "<down>") 'evil-window-decrease-height)
    (define-key evil-normal-state-map (kbd "<right>") 'evil-window-increase-width)
    (define-key evil-normal-state-map (kbd "<left>") 'evil-window-decrease-width)
    (define-key evil-normal-state-map (kbd "g r") 'rgrep)
    (define-key evil-normal-state-map (kbd "; a") 'ff-find-other-file)
    (define-key evil-normal-state-map (kbd ", fed") (lambda() (interactive) (find-file "~/.emacs.d/init.el")))
    (define-key evil-normal-state-map (kbd ", feR") (lambda() (interactive) (load-file "~/.emacs.d/init.el")))
    )

  (use-package csharp-mode
    :ensure t
    )
  (use-package ivy
               :ensure t
               :init
               :config
               (ivy-mode t)
               )

  (use-package highlight-numbers
               :ensure t
               :init :config
               (highlight-numbers-mode t)
               )
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 20) ; 최근 파일 목록 수
  (global-auto-revert-mode t)
  (setq initial-major-mode 'text-mode)

  (which-function-mode)

  (setq-default transient-mark-mode t)
  ;백업파일 만들지 않기,
  (setq make-backup-files nil)

  ;자동 저장 기능 끄기
  (setq auto-save-default nil)

  (use-package atom-one-dark-theme
               :ensure t
               :init
               :config
               (load-theme 'atom-one-dark t)
               )
  (use-package powerline
               :ensure t
               :init
               :config (progn
                         (use-package airline-themes
                           :ensure t
                                      :config
                                      (load-theme 'airline-dark t)
                                      )
                         ))
  (use-package helm
               :ensure t
               ;;:bind(("M-x" . helm-smex))
               )

  (use-package helm-smex
               :ensure t
               :bind(("M-x" . helm-smex))
               )
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("<f8>"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
    :after treemacs persp-mode ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package auto-complete
    :ensure t
    :config
    (global-auto-complete-mode t)

    (define-key ac-completing-map (kbd "C-n") 'ac-next)
    (define-key ac-completing-map (kbd "C-p") 'ac-previous)
    )
  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode t)
    )

  (use-package org-trello
    :ensure t
    )

  (set-face-attribute 'default nil :height 160)

  ;; (setq scroll-step 1)
  ;; ;
                                          ; (setq next-screen-context-lines 3)
  (setq search-highlight t)
  ;상단 메뉴 숨기기
  (menu-bar-mode 0)

  (prefer-coding-system 'utf-8)
  ;; (setq default-input-method "korean-hangul390")
  ;; (setq default-korean-keyboard "390")
  (setq jit-lock-defer-time 0.05)
  (setq-default c-basic-offset 4)
  (setq-default indent-tabs-mode nil)

  (global-set-key (kbd "C-SPC") 'toggle-input-method)
  (global-set-key (kbd "<Hangul>") 'toggle-input-method)

#+END_SRC
