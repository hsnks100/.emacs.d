#+STARTIP: overview
* basic setting
(global-hl-line-mode +1)
(line-number-mode +1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
(size-indication-mode t)


* ui interface
#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(set-face-attribute 'default nil
                    :family "Fira Code"
                    :height 110
                    :weight 'bold
                    :width 'normal)
#+END_SRC

* plugins


#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "<escape>") 'keyboard-escape-quit)
  (desktop-save-mode 1)

  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (modify-syntax-entry ?_ "w")
              )
            )
  (defun create-tags (dir-name)
    "Create tags file."
    (interactive "Directory: ")
    (eshell-command
     (format "find %s -type f -name \"*.*\" | etags -" dir-name)))


  ;; (use-package amx
  ;;   :ensure t
  ;;   :config
  ;;   (amx-mode t)
  ;;   )

  (use-package try
    :ensure t
    )
  (use-package smooth-scrolling
    :ensure t
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5)
    )
  (use-package solarized-theme
    :ensure t
    )
  (use-package evil
    :ensure t
    :init


    (setq evil-respect-visual-line-mode t)
    (global-visual-line-mode t)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode t)
    (define-key evil-normal-state-map (kbd "C-r") 'undo-redo)
    (evil-set-initial-state 'calendar-mode 'emacs)
    (evil-set-initial-state 'calculator-mode 'emacs)
    (evil-set-initial-state 'git-rebase-mode 'emacs)
    (evil-set-initial-state 'magit-blame-mode 'emacs)
    (setq-default evil-symbol-word-search t)
    (defvar evil-want-C-g-bindings t)
    (defvar evil-want-C-i-jump (or (daemonp) (display-graphic-p)))
    (defvar evil-want-C-u-scroll t)  ; moved the universal arg to <leader> u
    (defvar evil-want-C-u-delete t)
    (defvar evil-want-C-w-scroll t)
    (defvar evil-want-C-w-delete t)
    (defvar evil-want-Y-yank-to-eol t)
    (defvar evil-want-abbrev-expand-on-insert-exit nil)

    ;;(global-undo-tree-mode -1)
    (define-key evil-insert-state-map (kbd "C-SPC") 'toggle-input-method)
    (define-key evil-normal-state-map (kbd ", w") 'buffer-menu)
    (define-key evil-normal-state-map (kbd ", cc") 'compile)
    (define-key evil-normal-state-map (kbd "[") 'evil-scroll-up)
    (define-key evil-normal-state-map (kbd "]") 'evil-scroll-down)
    (define-key evil-visual-state-map (kbd "[") 'evil-scroll-up)
    (define-key evil-visual-state-map (kbd "]") 'evil-scroll-down)
    (global-set-key (kbd "C-h") 'evil-window-left)
    (global-set-key (kbd "C-l") 'evil-window-right)
    (global-set-key (kbd "C-j") 'evil-window-down)
    (global-set-key (kbd "C-k") 'evil-window-up)
    (define-key evil-normal-state-map "_" 'comment-line)
    (define-key evil-visual-state-map "_" 'comment-dwim)
    (define-key evil-normal-state-map (kbd ", w") 'buffer-menu)
    (define-key evil-normal-state-map (kbd "<up>") 'evil-window-increase-height)
    (define-key evil-normal-state-map (kbd "<down>") 'evil-window-decrease-height)
    (define-key evil-normal-state-map (kbd "<right>") 'evil-window-increase-width)
    (define-key evil-normal-state-map (kbd "<left>") 'evil-window-decrease-width)
    (define-key evil-normal-state-map (kbd "g r") 'rgrep)
    (define-key evil-normal-state-map (kbd "; a") 'ff-find-other-file)
    (define-key evil-normal-state-map (kbd ", fed") (lambda() (interactive) (find-file "~/.emacs.d/init.el")))
    (define-key evil-normal-state-map (kbd ", feR") (lambda() (interactive) (load-file "~/.emacs.d/init.el")))
    (define-key evil-normal-state-map (kbd ", gwgw") (lambda() (interactive) (find-file "/sshx:175.123.88.134#3389|sshx:gwgw.com|sshx:aflxvsol12:~")))
    ;; (define-key evil-normal-state-map (kbd ", gwgw") (lambda() (interactive) (find-file "/sshx:gwgw.com|sshx:aflxvsol12:~")))
    (define-key evil-normal-state-map (kbd ", chat") (lambda() (interactive) (find-file "/sshx:175.123.88.134#3389|sshx:gwgw.com|sshx:root@203.238.139.141:~")))
    )

  (use-package csharp-mode
    :ensure t
    )
  (use-package highlight-numbers
               :ensure t
               :init :config
               (highlight-numbers-mode t)
               )
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 20) ; 최근 파일 목록 수
  (global-auto-revert-mode t)
  ;;(global-undo-tree-mode -1)

  ;; (setf (cdr (assoc "cc" grep-files-aliases))
  ;;       (assoc "cchh" grep-files-aliases))
  (which-function-mode)

  (setq-default transient-mark-mode t)
  ;백업파일 만들지 않기,
  (setq make-backup-files nil)

  ;자동 저장 기능 끄기
  (setq auto-save-default nil)

  (use-package atom-one-dark-theme
               :ensure t
               :init
               :config
               ;; (load-theme 'atom-one-dark t)
               )
  (use-package powerline
               :ensure t
               :init
               :config (progn
                         (use-package airline-themes
                           :ensure t
                                      :config
                                      ;; (load-theme 'airline-dark t)
                                      )
                         ))
  (use-package helm
               :ensure t
               :config
    (use-package helm-smex
    :ensure t
                :bind(("M-x" . helm-smex)))
               )

  ;; (use-package ivy-smex
  ;;              :ensure t
  ;;              :bind(("M-x" . ivy-smex))
  ;;              )
  (use-package neotree
    :ensure t
    :config
        (setq neo-smart-open t)

        (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
        (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
        (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
        (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
        (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
        (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
        (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
        (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)

    )

  (use-package auto-complete
    :ensure t
    :config
    (global-auto-complete-mode t)

    (define-key ac-completing-map (kbd "C-n") 'ac-next)
    (define-key ac-completing-map (kbd "C-p") 'ac-previous)
    )
  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode t)
    )

  (set-face-attribute 'default nil :height 140)

  ;; (setq scroll-step 1)
  ;; ;
                                          ; (setq next-screen-context-lines 3)
  (setq search-highlight t)
  ;상단 메뉴 숨기기
  (menu-bar-mode 0)

  (prefer-coding-system 'utf-8)
  ;; (setq default-input-method "korean-hangul390")
  ;; (setq default-korean-keyboard "390")
  (setq jit-lock-defer-time 0.05)
  (setq-default c-basic-offset 4)
  (setq-default indent-tabs-mode nil)

  (global-set-key (kbd "C-SPC") 'toggle-input-method)
  (global-set-key (kbd "<Hangul>") 'toggle-input-method)
  '(grep-files-aliases
   '(("all" . "* .[!.]* ..?*")
     ("el" . "*.el")
     ("ch" . "*.[ch]")
     ("c" . "*.c")
     ("cc" . "*.h *.cc *.cxx *.cpp *.C *.CC *.c++")
     ("cchh" . "*.cc *.[ch]xx *.[ch]pp *.[CHh] *.CC *.HH *.[ch]++")
     ("hh" . "*.hxx *.hpp *.[Hh] *.HH *.h++")
     ("h" . "*.h")
     ("l" . "[Cc]hange[Ll]og*")
     ("m" . "[Mm]akefile*")
     ("tex" . "*.tex")
     ("texi" . "*.texi")
     ("asm" . "*.[sS]")))


    (add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.ipp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.tcc\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.hh\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cc\\'" . c++-mode))
    ;; (add-to-list 'auto-mode-alist '("\\.h++\\'" . c++-mode))
    ;; (add-to-list 'auto-mode-alist '("\\.c++\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.hxx\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cxx\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.txx\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))


#+END_SRC
